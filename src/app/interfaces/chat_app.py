#!/usr/bin/env python3
"""
Streamlit –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    poetry run streamlit run src/app/chat_app.py
    streamlit run src/app/chat_app.py
"""

import json

import streamlit as st

from src.app.adapters import FinamAPIClient
from src.app.core import call_llm, get_settings
from src.app.interfaces.utils.base import create_system_prompt, extract_api_request, is_unsafe_method, parse_method_endpoint

def confirm_request(finam_client: FinamAPIClient, method, path, conversation_history):
    """–í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    st.session_state.messages.append(
        {"role": "assistant", "content": f"üîç –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å: `{method} {path}`"}
    )
    st.session_state.api_response = finam_client.execute_request(method, path)
    # st.session_state.messages.append(
    #     {"role": "assistant", "content": f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: {method} {path}"}
    # )
    if "api_data" not in st.session_state:
        st.session_state.api_data = None
    if st.session_state.api_response:
        api_response = st.session_state.api_response
        st.session_state.api_data = {"method": method, "path": path, "response": api_response}
        st.session_state.api_response = None

        if not st.session_state.mock_run:
            conversation_history.append({"role": "assistant", "content": st.session_state.assistant_message})
            conversation_history.append({
                "role": "user",
                "content": f"–†–µ–∑—É–ª—å—Ç–∞—Ç API: {json.dumps(api_response, ensure_ascii=False)}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π.",
            })

            response = call_llm(conversation_history, temperature=0.3)
            st.session_state.assistant_message = response["choices"][0]["message"]["content"]
        else:
            st.session_state.assistant_message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç API: {json.dumps(api_response, ensure_ascii=False)}"
    if st.session_state.assistant_message:
        st.markdown(st.session_state.assistant_message)
        message_data = {"role": "assistant", "content": st.session_state.assistant_message}
        if st.session_state.api_data:
            message_data["api_request"] = st.session_state.api_data
            st.session_state.api_data = None
        st.session_state.messages.append(message_data)
        st.session_state.assistant_message = None

def cancel_request(method, path):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞"""
    st.session_state.messages.append(
        {"role": "assistant", "content": f"üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ: {method} {path}"}
    )
    st.session_state.api_response = None


def main() -> None:  # noqa: C901
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    st.set_page_config(page_title="AI –¢—Ä–µ–π–¥–µ—Ä (Finam)", page_icon="ü§ñ", layout="wide")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢—Ä–µ–π–¥–µ—Ä–∞")
    st.caption("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Finam TradeAPI")

    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings = get_settings()
        st.info(f"**–ú–æ–¥–µ–ª—å:** {settings.openrouter_model}")

        # Finam API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("üîë Finam API", expanded=False):
            api_token = st.text_input(
                "Access Token",
                type="password",
                help="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ Finam TradeAPI (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FINAM_ACCESS_TOKEN)",
            )
            api_base_url = st.text_input("API Base URL", value="https://api.finam.ru", help="–ë–∞–∑–æ–≤—ã–π URL API")

        account_id = st.text_input("ID —Å—á–µ—Ç–∞", value="", help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.messages = []
            st.rerun()

        st.markdown("---")
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        st.markdown("""
        - –ö–∞–∫–∞—è —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞?
        - –ü–æ–∫–∞–∂–∏ –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        - –ß—Ç–æ –≤ —Å—Ç–∞–∫–∞–Ω–µ –ø–æ –ì–∞–∑–ø—Ä–æ–º—É?
        - –ü–æ–∫–∞–∂–∏ —Å–≤–µ—á–∏ YNDX –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        - –ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞?
        - –î–µ—Ç–∞–ª–∏ –º–æ–µ–π —Å–µ—Å—Å–∏–∏
        """)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if "messages" not in st.session_state:
        st.session_state.messages = []
    if "welcome_shown" not in st.session_state:
        st.session_state.welcome_shown = False 
    if not st.session_state.welcome_shown:
        with st.chat_message("assistant"):
            st.markdown("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
            col1, col2 = st.columns(2)
            with col1:
                if st.button("mock-run", key="btn_quotes"):
                    st.session_state.messages.append(
                        {"role": "assistant", "content": "Mock —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω. –ü–∏—à–∏ 'METHOD endpoint' —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å."}
                    )
                    st.session_state.welcome_shown = True
                    st.session_state.mock_run = True
                    st.rerun()
            with col2:
                if st.button("Real-run", key="btn_portfolio"):
                    st.session_state.messages.append(
                        {"role": "assistant", "content": "Real-mode –≤–∫–ª—é—á—ë–Ω üíº"}
                    )
                    st.session_state.welcome_shown = True
                    st.session_state.mock_run = False
                    st.rerun()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Finam API –∫–ª–∏–µ–Ω—Ç–∞
    finam_client = FinamAPIClient(access_token=api_token or None, base_url=api_base_url if api_base_url else None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not finam_client.access_token:
        st.sidebar.warning(
            "‚ö†Ô∏è Finam API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è FINAM_ACCESS_TOKEN –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—ã—à–µ."
        )
    else:
        st.sidebar.success("‚úÖ Finam API —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã
            if "api_request" in message:
                with st.expander("üîç API –∑–∞–ø—Ä–æ—Å"):
                    st.code(f"{message['api_request']['method']} {message['api_request']['path']}", language="http")
                    st.json(message["api_request"]["response"])

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM
        conversation_history = [{"role": "system", "content": create_system_prompt()}]
        for msg in st.session_state.messages:
            conversation_history.append({"role": msg["role"], "content": msg["content"]})

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message("assistant"), st.spinner("–î—É–º–∞—é..."):
            try:
                method, path = None, None
                api_response = None
                if "assistant_message" not in st.session_state:
                    st.session_state.assistant_message = None
                if st.session_state.mock_run:
                    # –†–∞–∑–±–∏—Ä–∞–µ–º METHOD endpoint –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    method, path = parse_method_endpoint(prompt)
                    if not method or not path:
                        st.session_state.assistant_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–µ—Ç–æ–¥ –∏ –ø—É—Ç—å –≤ mock-run"
                else:
                    # real-run: –≤—ã–∑—ã–≤–∞–µ–º LLM
                    response = call_llm(conversation_history, temperature=0.3)
                    st.session_state.assistant_message = response["choices"][0]["message"]["content"]
                    method, path = extract_api_request(st.session_state.assistant_message)

                if "api_response" not in st.session_state:
                    st.session_state.api_response = None
                if method and path:
                    if is_unsafe_method(method, path):
                        st.markdown(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å `{method} {path}` —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                        col1, col2 = st.columns(2)
                        with col1:
                            st.button(
                                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                key=f"confirm_{prompt}",
                                on_click=confirm_request,
                                args=(finam_client, method, path, conversation_history),
                            )
                        with col2:
                            st.button(
                                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                key=f"cancel_{prompt}",
                                on_click=cancel_request,
                                args=(method, path),
                            )
                    else:
                        st.session_state.api_response = finam_client.execute_request(method, path)

                if "api_data" not in st.session_state:
                    st.session_state.api_data = None
                if st.session_state.api_response:
                    api_response = st.session_state.api_response
                    st.session_state.api_data = {"method": method, "path": path, "response": api_response}
                    st.session_state.api_response = None

                    if not st.session_state.mock_run:
                        conversation_history.append({"role": "assistant", "content": st.session_state.assistant_message})
                        conversation_history.append({
                            "role": "user",
                            "content": f"–†–µ–∑—É–ª—å—Ç–∞—Ç API: {json.dumps(api_response, ensure_ascii=False)}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π.",
                        })

                        response = call_llm(conversation_history, temperature=0.3)
                        st.session_state.assistant_message = response["choices"][0]["message"]["content"]
                    else:
                        st.session_state.assistant_message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç API: {json.dumps(api_response, ensure_ascii=False)}"
                if st.session_state.assistant_message:
                    st.markdown(st.session_state.assistant_message)
                    message_data = {"role": "assistant", "content": st.session_state.assistant_message}
                    if st.session_state.api_data:
                        message_data["api_request"] = st.session_state.api_data
                        st.session_state.api_data = None
                    st.session_state.messages.append(message_data)
                    st.session_state.assistant_message = None
                

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
